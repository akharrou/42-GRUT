# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    grut.template                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: akharrou <akharrou@student.42.us.org>      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/05/14 09:55:22 by akharrou          #+#    #+#              #
#    Updated: 2019/06/09 15:29:02 by akharrou         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

try:

	import os
	import sys

	# COLORIZATION — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	RED        = '\033[31m'
	GREEN      = '\033[32m'
	YELLOW     = '\033[38;2;247;249;94m'
	GOLD       = '\033[38;2;218;171;119m'

	DEFAULT    = '\033[0m'
	ITALTIC    = '\033[3m'
	UNDELRINED = '\033[4m'
	BACKGROUND = '\033[0m'
	STRIPS     = GOLD

	RED_BACKGROUND    = '\033[41m'

	# TITLES — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	TITLE    = 'GENERALIZED RAMBO UNIT-TESTER ™️'

	FILENAME='~/42-GRUT/$__________' + '_unittester.py'
	EDITION='$__________ Edition'

	# EXTENSION — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

$GRUTEXTENSION$

	# USAGE & MANUAL — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	def usage():
		print(f'usage: python3 {FILENAME} {UNDELRINED}Program_A Launch Command{DEFAULT} {UNDELRINED}Program_B Launch Command{DEFAULT} [ {UNDELRINED}--help{DEFAULT} | {UNDELRINED}--manual{DEFAULT} | -d {UNDELRINED}directory(ies){DEFAULT} ... | -f {UNDELRINED}file(s){DEFAULT} ... | {UNDELRINED}input_argument(s){DEFAULT} ... ]')
		sys.exit(1)

	def manual():
		print(f'{UNDELRINED}Coming soon...{DEFAULT}')
		sys.exit(1)

	# FLAG HANDLING — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	try:

		# '--help' Flag :

		if (  len(sys.argv) < 3            or
			sys.argv[3] == '-h'          or
			sys.argv[3] == '--help'      or
			sys.argv[3] == ''                 ):

			usage()

		# '--manual' Flag :

		elif (  sys.argv[3] == '-m'        or
				sys.argv[3] == '-man'      or
				sys.argv[3] == '-manual'   or
				sys.argv[3] == '--manual'      ):

			manual()

		# '-f' Flag :

		elif (sys.argv[3] == '-f'):

			if (len(sys.argv[4:]) < 1):
				usage()

			try:

				arguments = []
				for argsFile in sys.argv[4:]:

					try:

						with open(argsFile, 'r') as fd:
							arguments.extend(fd.readlines())

					except Exception:
						print(f'{argsFile}: Invalid Input File')
						sys.exit(1)

			except Exception as e:
				usage()

		# '-d' Flag :

		elif (sys.argv[3] == '-d'):

			if (len(sys.argv[4:]) < 1):
				usage()

			try:

				arguments = []

				for dir in sys.argv[4:]:

					try:

						for dirfile in os.listdir(dir):

							try:

								dirfile = f'./{dir}/{dirfile}'

								if os.path.isfile(dirfile) == True:
									with open(dirfile, 'r') as fd:
										arguments.extend(fd.readlines())

							except Exception:
								print(f'{dirfile}: Invalid Input File')
								sys.exit(1)

					except Exception:
						print(f'{dir}: Invalid Directory')
						sys.exit(1)

			except Exception as e:
				usage()

		# No Flag :

		else:
			arguments = sys.argv[3:]

	except IndexError:
		arguments = ['']

	# DYNAMIC INPUT — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	try:

		launch_command_programA = sys.argv[1]
		launch_command_programB = sys.argv[2]

	except NameError as err:
		print(f'\nMissing Programs')
		sys.exit(1)

	# HEADER — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	print(f'{STRIPS}{f"=" * (BAR_LEN + 2)}')
	print(f'|{DEFAULT}{BACKGROUND}{f" " * (BAR_LEN)}{DEFAULT}{STRIPS}|')
	print(f'|{DEFAULT}{BACKGROUND}{f" " * (int((BAR_LEN - 3) / 2) - int(len(TITLE) / 2))}⚜️  {DEFAULT}{TITLE}{DEFAULT}{BACKGROUND}  ⚜️{f" " * (int((BAR_LEN - 3) / 2) - int(len(TITLE) / 2) - 2)}{DEFAULT}{STRIPS}|')
	print(f'|{DEFAULT}{BACKGROUND}{f" " * int((BAR_LEN - 3) / 2 - int(len(EDITION) / 2))}~ {ITALTIC}{EDITION}{DEFAULT}{BACKGROUND} ~{f" " * (int((BAR_LEN - 3) / 2 - int(len(EDITION) / 2)) - 1 - (len(EDITION) % 2))}{DEFAULT}{STRIPS}|')
	print(f'|{DEFAULT}{BACKGROUND}{f" " * (BAR_LEN)}{DEFAULT}{STRIPS}|')
	print(f'{STRIPS}{f"=" * (BAR_LEN + 2)}{DEFAULT}')

	print(f'\nProgram A Launch Command: {launch_command_programA}')
	print(f'Program B Launch Command: {launch_command_programB}')
	print('')

	# BODY — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	try:

		GRUTBody__$__________(launch_command_programA, launch_command_programB)

	except KeyboardInterrupt:
		print(f'{UNDELRINED}\n\n🚨  You abruptly quit ! 🚨{DEFAULT}')
		sys.exit(1)

	# FOOTER — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #

	print(f'️\n{UNDELRINED}Share if you found it useful !{DEFAULT} :: 42 G.R.U.T -- © 2019')
	print('')

except Exception as e:
	print(f' {f"—" * (BAR_LEN)}\n')
	print(f'{RED_BACKGROUND}{YELLOW}💣  G.R.U.T CRASHED 💣{DEFAULT}\n')
	print(f'{UNDELRINED}\n🚨  Please Check Your Input  |OR|  Report the Issue ! 🚨{DEFAULT}  :: 42 G.R.U.T -- © 2019')
	print(f'{DEFAULT}Copy paste the following and {YELLOW}report or dm{DEFAULT} @akharrou or @kmira the issue\n\n')
	print(f'{UNDELRINED}GRUT ISSUE:\n{DEFAULT}{RED_BACKGROUND}{ITALTIC}')
	raise e
